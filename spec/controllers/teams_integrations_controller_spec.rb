require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TeamsIntegrationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # TeamsIntegration. As you add validations to TeamsIntegration, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  before(:each) { login }

  describe "GET #index" do
    it "assigns all teams_integrations as @teams_integrations" do
      teams_integration = TeamsIntegration.create! valid_attributes
      get :index, params: {}
      expect(assigns(:teams_integrations)).to eq([teams_integration])
    end
  end

  describe "GET #show" do
    it "assigns the requested teams_integration as @teams_integration" do
      teams_integration = TeamsIntegration.create! valid_attributes
      get :show, params: {:id => teams_integration.to_param}
      expect(assigns(:teams_integration)).to eq(teams_integration)
    end
  end

  describe "GET #new" do
    it "assigns a new teams_integration as @teams_integration" do
      get :new, params: {}
      expect(assigns(:teams_integration)).to be_a_new(TeamsIntegration)
    end
  end

  describe "GET #edit" do
    it "assigns the requested teams_integration as @teams_integration" do
      teams_integration = TeamsIntegration.create! valid_attributes
      get :edit, params: {:id => teams_integration.to_param}
      expect(assigns(:teams_integration)).to eq(teams_integration)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new TeamsIntegration" do
        expect {
          post :create, params: {:teams_integration => valid_attributes}
        }.to change(TeamsIntegration, :count).by(1)
      end

      it "assigns a newly created teams_integration as @teams_integration" do
        post :create, params: {:teams_integration => valid_attributes}
        expect(assigns(:teams_integration)).to be_a(TeamsIntegration)
        expect(assigns(:teams_integration)).to be_persisted
      end

      it "redirects to the created teams_integration" do
        post :create, params: {:teams_integration => valid_attributes}
        expect(response).to redirect_to(TeamsIntegration.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved teams_integration as @teams_integration" do
        post :create, params: {:teams_integration => invalid_attributes}
        expect(assigns(:teams_integration)).to be_a_new(TeamsIntegration)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:teams_integration => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested teams_integration" do
        teams_integration = TeamsIntegration.create! valid_attributes
        put :update, params: {:id => teams_integration.to_param, :teams_integration => new_attributes}
        teams_integration.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested teams_integration as @teams_integration" do
        teams_integration = TeamsIntegration.create! valid_attributes
        put :update, params: {:id => teams_integration.to_param, :teams_integration => valid_attributes}
        expect(assigns(:teams_integration)).to eq(teams_integration)
      end

      it "redirects to the teams_integration" do
        teams_integration = TeamsIntegration.create! valid_attributes
        put :update, params: {:id => teams_integration.to_param, :teams_integration => valid_attributes}
        expect(response).to redirect_to(teams_integration)
      end
    end

    context "with invalid params" do
      it "assigns the teams_integration as @teams_integration" do
        teams_integration = TeamsIntegration.create! valid_attributes
        put :update, params: {:id => teams_integration.to_param, :teams_integration => invalid_attributes}
        expect(assigns(:teams_integration)).to eq(teams_integration)
      end

      it "re-renders the 'edit' template" do
        teams_integration = TeamsIntegration.create! valid_attributes
        put :update, params: {:id => teams_integration.to_param, :teams_integration => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested teams_integration" do
      teams_integration = TeamsIntegration.create! valid_attributes
      expect {
        delete :destroy, params: {:id => teams_integration.to_param}
      }.to change(TeamsIntegration, :count).by(-1)
    end

    it "redirects to the teams_integrations list" do
      teams_integration = TeamsIntegration.create! valid_attributes
      delete :destroy, params: {:id => teams_integration.to_param}
      expect(response).to redirect_to(teams_integrations_url)
    end
  end

end
